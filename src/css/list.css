@layer components {
  .List,
  .Prose :where(ul:not([class]), ol:not([class])) {
    margin: calc((27 / 16) * 1rem) 0;

    &:first-child {
      margin-block-start: 0;
    }

    &:last-child {
      margin-block-end: 0;
    }

    & li {
      font-size: var(--step-0);
      margin-block-end: calc((9 / 16) * 1rem);
      max-width: 70ch;

      &:last-child {
        margin-block-end: 0;
      }
    }

    & a {
      font-weight: 500;

      &:not(:hover) {
        color: oklch(var(--color-primary2));
      }
    }
  }

  .Prose :where(ol:not([class])) {
    counter-reset: ol-counter;
    list-style: none outside;

    & > li {
      &::before {
        background: none;
        content: counter(ol-counter) '.';
        counter-increment: ol-counter;
        color: oklch(var(--color-secondary));
        display: inline-block;
        font-family: 'Comic Neue', 'Raleway', sans-serif;
        font-style: italic;
        font-size: var(--step-0);
        font-weight: 600;
        margin: 0 0 0 calc((-36 / 16) * 1rem);
        padding-inline-end: calc((9 / 16) * 1rem);
        text-align: right;
        width: calc((36 / 16) * 1rem);
      }

      &:nth-child(1n + 10)::before {
        font-size: 70%;
      }
    }
  }

  @container app (inline-size < calc((800 / 16) * 1rem)) {
    .Prose :where(ol:not([class])) {
      & > li {
        &::before {
          font-size: var(--step-s);
          margin-inline-start: calc((-27 / 16) * 1rem);
          padding-inline-end: calc((5 / 16) * 1rem);
          width: calc((27 / 16) * 1rem);
        }
      }
    }
  }
}

@layer modifiers {
  .List--large {
    &:not(:first-child) {
      margin-block-start: calc((36 / 16) * 1rem);
    }

    &:not(:last-child) {
      margin-block-end: calc((36 / 16) * 1rem);
    }

    & a {
      --color-primary2: var(--color-primary);
      font-weight: 600;
    }
  }

  .List--columns {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: calc((36 / 16) * 1rem);
    margin: calc((36 / 16) * 1rem) 0;
  }

  .List--folio {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: calc((18 / 16) * 1rem);
    grid-row-gap: calc((18 / 16) * 1rem);
    margin: calc((45 / 16) * 1rem) 0;
    max-width: calc(((320 + 320 + 18) / 16) * 1rem);

    & li {
      background: transparent !important;
      margin: 0;
      max-width: max-content;

      &::before {
        display: none;
      }

      &:nth-child(odd) img {
        transform: scale(0.9) rotateY(-15deg) rotateX(2deg);
      }
      &:nth-child(even) img {
        transform: scale(0.9) rotateY(15deg) rotateX(2deg);
      }
    }

    & a {
      display: block;
      perspective: 500px;
      text-decoration: none;
      background: none !important;

      &:focus,
      &:hover {
        & img {
          transform: translateZ(0);
        }
      }
    }

    & img {
      backface-visibility: hidden;
      background-color: oklch(var(--db-black) / 0.2);
      border-radius: calc((9 / 16) * 1rem);
      border: calc((2 / 16) * 1rem) solid oklch(var(--color-background));
      box-shadow: calc((-4 / 16) * 1rem) 0 0 calc((-2 / 16) * 1rem)
          oklch(var(--color-secondary)),
        calc((4 / 16) * 1rem) calc((4 / 16) * 1rem) 0 0
          oklch(var(--db-black) / 0.2);
      display: block;
      transform-style: preserve-3d;
      transform-origin: 50% 50%;
      transition: transform 300ms;
    }
  }

  @container main (inline-size >= calc((600 / 16) * 1rem)) {
    .List--large {
      & li {
        font-size: var(--step-1);
        margin-block-end: calc((18 / 16) * 1rem);
      }
    }
  }

  @container main (inline-size >= calc((400 / 16) * 1rem)) {
    .List--columns {
      grid-template-columns: 1fr 1fr 1fr;
    }

    .List--folio {
      grid-row-gap: calc((36 / 16) * 1rem);
      grid-template-columns: 1fr 1fr 1fr;
      max-width: none;
    }
  }

  @container app (inline-size < calc((800 / 16) * 1rem)) {
    .List--columns {
      grid-column-gap: calc((27 / 16) * 1rem);
    }
  }
}
